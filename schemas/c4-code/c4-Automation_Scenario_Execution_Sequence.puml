@startuml Automation_Scenario_Execution_Sequence
!theme plain
autonumber

participant "IoT Device" as Device
participant "IoT Gateway" as IoTGW
participant "Message Broker" as Broker
participant "Automation\nEvent Handler" as EventHandler
participant "Scenario\nAggregate" as Scenario
participant "Scenario\nRepository" as ScenarioRepo
participant "Condition\nEvaluator" as Evaluator
participant "Command\nDispatcher" as Dispatcher
participant "Heating Service" as Heating
participant "Light Service" as Light
participant "Notification\nService" as Notification

Device -> IoTGW: Temperature reading: 18°C
activate IoTGW

IoTGW -> Broker: publish(TemperatureSensorEvent)
activate Broker

Broker -> EventHandler: consume(TemperatureSensorEvent)
activate EventHandler

EventHandler -> ScenarioRepo: findByTriggerType(TEMPERATURE)
activate ScenarioRepo
ScenarioRepo --> EventHandler: List<Scenario>
deactivate ScenarioRepo

loop For each scenario
    EventHandler -> Scenario: getTriggerConditions()
    activate Scenario
    Scenario --> EventHandler: conditions
    deactivate Scenario

    EventHandler -> Evaluator: evaluate(conditions, event)
    activate Evaluator

    Evaluator -> Evaluator: checkTemperatureThreshold()
    Evaluator -> Evaluator: checkTimeWindow()
    Evaluator -> Evaluator: checkLocation()

    alt Conditions met
        Evaluator --> EventHandler: true
        deactivate Evaluator

        EventHandler -> Scenario: getActions()
        activate Scenario
        Scenario --> EventHandler: List<Action>
        deactivate Scenario

        EventHandler -> Dispatcher: dispatchActions(actions)
        activate Dispatcher

        par Execute actions in parallel
            Dispatcher -> Heating: POST /heating/turn-on
            activate Heating
            Heating --> Dispatcher: 200 OK
            deactivate Heating

            Dispatcher -> Light: POST /light/set-brightness
            activate Light
            Light --> Dispatcher: 200 OK
            deactivate Light

            Dispatcher -> Notification: POST /notify
            activate Notification
            Notification --> Dispatcher: 200 OK
            deactivate Notification
        end

        Dispatcher --> EventHandler: All actions executed
        deactivate Dispatcher

        EventHandler -> Scenario: recordExecution()
        activate Scenario
        Scenario -> Scenario: updateLastExecuted()
        Scenario -> Scenario: incrementExecutionCount()
        Scenario --> EventHandler: success
        deactivate Scenario

        EventHandler -> ScenarioRepo: save(scenario)
        activate ScenarioRepo
        ScenarioRepo --> EventHandler: saved
        deactivate ScenarioRepo

    else Conditions not met
        Evaluator --> EventHandler: false
        deactivate Evaluator
        note right: Skip this scenario
    end
end

EventHandler --> Broker: ack
deactivate EventHandler
deactivate Broker
deactivate IoTGW

note over Dispatcher, Notification
    Действия выполняются параллельно
    для уменьшения времени отклика
end note

@enduml