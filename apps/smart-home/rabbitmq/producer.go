package rabbitmq

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"time"

	amqp "github.com/rabbitmq/amqp091-go"
)

type Producer struct {
	conn    *amqp.Connection
	channel *amqp.Channel
	queue   string
}

// TelemetryEvent –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
type TelemetryEvent struct {
	DeviceID   string    `json:"device_id"`
	MetricName string    `json:"metric_name"`
	Value      float64   `json:"value"`
	Unit       string    `json:"unit"`
	Timestamp  time.Time `json:"timestamp"`
}

// NewProducer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ producer –¥–ª—è RabbitMQ
func NewProducer(url string, queueName string) (*Producer, error) {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
	conn, err := amqp.Dial(url)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to RabbitMQ: %w", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
	channel, err := conn.Channel()
	if err != nil {
		conn.Close()
		return nil, fmt.Errorf("failed to open channel: %w", err)
	}

	// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
	_, err = channel.QueueDeclare(
		queueName, // –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
		true,      // durable (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
		false,     // auto-delete
		false,     // exclusive
		false,     // no-wait
		nil,       // arguments
	)
	if err != nil {
		channel.Close()
		conn.Close()
		return nil, fmt.Errorf("failed to declare queue: %w", err)
	}

	log.Printf("‚úÖ Connected to RabbitMQ, queue: %s", queueName)

	return &Producer{
		conn:    conn,
		channel: channel,
		queue:   queueName,
	}, nil
}

// PublishTelemetry –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –≤ RabbitMQ
func (p *Producer) PublishTelemetry(event TelemetryEvent) error {
	// –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON
	body, err := json.Marshal(event)
	if err != nil {
		return fmt.Errorf("failed to marshal event: %w", err)
	}

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	err = p.channel.PublishWithContext(
		ctx,
		"",      // exchange
		p.queue, // routing key (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏)
		false,   // mandatory
		false,   // immediate
		amqp.Publishing{
			DeliveryMode: amqp.Persistent, // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫
			ContentType:  "application/json",
			Body:         body,
			Timestamp:    time.Now(),
		},
	)
	if err != nil {
		return fmt.Errorf("failed to publish message: %w", err)
	}

	log.Printf("üì§ Published telemetry: %s - %s = %.2f %s",
		event.DeviceID, event.MetricName, event.Value, event.Unit)

	return nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ
func (p *Producer) Close() {
	if p.channel != nil {
		p.channel.Close()
	}
	if p.conn != nil {
		p.conn.Close()
	}
	log.Println("üîå RabbitMQ connection closed")
}